class Category
  include  BaseModel
  include Mongoid::Search

  field :name, type: String
  field :code, type: String  
  field :brief, type: String  
  field :position, type: Integer # 排序

  has_many :products
  has_one :picture, :class_name => "::Picture"


  field :parent, type:String
  field :level, type:Integer, default:0
  before_save :calc_level


  def get_tree
    _children = self.children.map do |i|
      if i.get_tree["children"]
        true
      else
        {text: i.name, id: i.id, folder: true}
      end
    end

    {text:self.name, id:self.id, children: _children, folder: true}
  end

  def self.make_select_items
    self.asc(:level).map { |e| [e.name, e.id.to_s] }.unshift ["空", "0"]
  end
  
  def calc_level        
    self.level = 1 + parent_obj.level  unless parent_obj.nil?    
  end

  def parent_obj
    Category.where(id: self.parent).first
  end

  def children
    Category.where(parent: self.id.to_s) || []
  end

  def ancestors
    ret = [self]
    if parent_obj      
      ret.push parent_obj.ancestors
    end

    ret.reverse.flatten
  end

  def brothers
    Category.where(parent:self.parent, level:self.level).reject {|item| item.id == self.id} || []
  end

  def self.max_level
     Category.all.map {|i| i.level}.uniq.max
  end

  def self.default    
    root = Category.where(level:0).first
    ret = []

    while root
      ret.push root
      root = root.children.first
    end
    ret
  end

  def as_api_json
    children_json = []
    self.children.each do |c|
      children_json.push c.as_api_json
    end

    value = {category_id:self.id, name:name}
    value["children"] = children_json unless children.empty?
    value[:photo] = self.picture.url(:thumb) if picture

    value
  end

  def soft_delete!
    destroy!
  end
  
end
