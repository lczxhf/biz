class Wap::ApplicationController < ApplicationController
  before_action :set_title ,:init_user 
  before_action :set_page,  :only => [:edit, :show]

  before_action :invoke_wx_auth
  before_action :get_wechat_sns, if: :is_wechat_brower?


  layout 'wap'

  def set_title
    @title = controller_name
  end

  def set_page
    @item = controller_name.classify.constantize.where(:id => params[:id]).first
  end

  def init_user
    user_id = session[:user_id]
    @current_user = user_id.nil? ? nil : User.find_by_id(user_id)    
    # tmp_user = nil

    if @current_user.nil?
      # session[:uuid] ||= SecureRandom.hex(10)
      # tmp_user = User.find_or_create_by(uuid: session[:uuid])
      # tmp_user.state = 0    
      @current_user = User.create(state:0)
      session[:user_id] = @current_user.id
    end
    G.t "ip: #{request.real_ip}"
    @current_user.client_ip = request.real_ip
    @current_user.save
  end

  private
   # 调用微信授权获取openid
  def invoke_wx_auth
    if params[:state].present? || !is_wechat_brower? \
      || session['openid'].present? || session[:user_id].present? 
      return # 防止进入死循环授权
    end
    # 生成授权url，再进行跳转
    sns_url =  $wechat_client.authorize_url(request.url)
    redirect_to sns_url and return
  end

  # 在invoke_wx_auth中做了跳转之后，此方法截取
  def get_wechat_sns
    # params[:state] 这个参数是微信特定参数，所以可以以此来判断授权成功后微信回调。
    if session[:openid].blank? && params[:state].present?
      sns_info = $wechat_client.get_oauth_access_token(params[:code])
      Rails.logger.debug("Weixin oauth2 response: #{sns_info.result}")
      # 重复使用相同一个code调用时：
      if sns_info.result["errcode"] != "40029"
        session[:openid] = sns_info.result["openid"]
      end
    end
  end  
  
end
